{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport TopBarNav from './TopBarNav';\n\nvar Scene = function Scene(_ref) {\n  var index = _ref.index;\n  return __jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n  }, __jsx(Text, {\n    style: {\n      fontSize: 20\n    }\n  }, index));\n};\n\nvar ROUTES = {\n  Scene: Scene // ideally you would have a ROUTES object with multiple React component scenes\n\n}; // There are three types of labels (image, text, and element)\n\nvar ROUTESTACK = [{\n  image: require('./search.png'),\n  title: 'Scene'\n}, {\n  text: 'Hello',\n  title: 'Scene'\n}, // title is just the name of the Component being rendered.  See the renderScene property below\n{\n  element: __jsx(Text, null, \"World\"),\n  title: 'Scene'\n}];\n\nvar Example =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  function Example() {\n    _classCallCheck(this, Example);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Example).apply(this, arguments));\n  }\n\n  _createClass(Example, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(View, {\n        style: {\n          flex: 1\n        }\n      }, __jsx(TopBarNav // routeStack and renderScene are required props\n      , {\n        routeStack: ROUTESTACK,\n        renderScene: function renderScene(route, i) {\n          // This is a lot like the now deprecated Navigator component\n          var Component = ROUTES[route.title];\n          return __jsx(Component, {\n            index: i\n          });\n        } // Below are optional props\n        ,\n        headerStyle: [styles.headerStyle, {\n          paddingTop: 30\n        }] // probably want to add paddingTop if using TopBarNav for the  entire height of screen to account for notches/status bars\n        ,\n        labelStyle: styles.labelStyle,\n        underlineStyle: styles.underlineStyle,\n        imageStyle: styles.imageStyle,\n        sidePadding: 40 // Can't set sidePadding in headerStyle because it's needed to calculate the width of the tabs\n        ,\n        inactiveOpacity: 1,\n        fadeLabels: true\n      }));\n    }\n  }, {\n    key: \"anotherRender\",\n    value: function anotherRender() {\n      // if rendering the nav bar at the bottom is your thing\n      return __jsx(View, {\n        style: {\n          flex: 1\n        }\n      }, __jsx(View, {\n        style: {\n          flex: 1,\n          transform: [{\n            scaleY: -1\n          }]\n        }\n      }, __jsx(TopBarNav // routeStack and renderScene are required props\n      , {\n        routeStack: ROUTESTACK,\n        renderScene: function renderScene(route, i) {\n          // This is a lot like the now deprecated Navigator component\n          var Component = ROUTES[route.title];\n          return __jsx(View, {\n            style: {\n              flex: 1,\n              transform: [{\n                scaleY: -1\n              }]\n            }\n          }, __jsx(Component, {\n            index: i\n          }));\n        } // Below are optional props\n        ,\n        headerStyle: {\n          paddingTop: 20,\n          transform: [{\n            scaleY: -1\n          }]\n        } // probably want to add paddingTop: 20 if using TopBarNav for the  entire height of screen on iOS\n        ,\n        underlineStyle: {\n          height: 3\n        }\n      })));\n    }\n  }]);\n\n  return Example;\n}(React.Component);\n\nexport { Example as default };\nvar styles = StyleSheet.create({\n  headerStyle: {\n    borderBottomWidth: 1,\n    borderColor: '#e6faff',\n    backgroundColor: '#3385ff'\n  },\n  labelStyle: {\n    fontSize: 15,\n    fontWeight: '500',\n    color: '#fff'\n  },\n  imageStyle: {\n    height: 20,\n    width: 20,\n    tintColor: '#e6faff'\n  },\n  underlineStyle: {\n    height: 3.6,\n    backgroundColor: '#e6faff',\n    width: 40\n  }\n});","map":{"version":3,"sources":["C:/Users/AOWSAY/Desktop/AOWSAYWEBSITE/server/pages/menu.js"],"names":["React","View","Text","StyleSheet","TopBarNav","Scene","index","flex","justifyContent","alignItems","fontSize","ROUTES","ROUTESTACK","image","require","title","text","element","Example","route","i","Component","styles","headerStyle","paddingTop","labelStyle","underlineStyle","imageStyle","transform","scaleY","height","create","borderBottomWidth","borderColor","backgroundColor","fontWeight","color","width","tintColor"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { View, Text, StyleSheet } from 'react-native';\r\nimport TopBarNav from './TopBarNav';\r\n \r\nconst Scene = ({ index }) => (\r\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n        <Text style={{ fontSize: 20 }}>{index}</Text>\r\n    </View>\r\n);\r\n \r\nconst ROUTES = {\r\n    Scene\r\n    // ideally you would have a ROUTES object with multiple React component scenes\r\n};\r\n \r\n// There are three types of labels (image, text, and element)\r\nconst ROUTESTACK = [\r\n    { image: require('./search.png'), title: 'Scene' },\r\n    { text: 'Hello', title: 'Scene' }, // title is just the name of the Component being rendered.  See the renderScene property below\r\n    { element: <Text>World</Text>, title: 'Scene' }\r\n];\r\n \r\nexport default class Example extends React.Component {\r\n    render() {\r\n        return (\r\n            <View style={{ flex: 1 }}>\r\n                <TopBarNav\r\n                    // routeStack and renderScene are required props\r\n                    routeStack={ROUTESTACK}\r\n                    renderScene={(route, i) => {\r\n                        // This is a lot like the now deprecated Navigator component\r\n                        let Component = ROUTES[route.title];\r\n                        return <Component index={i} />;\r\n                    }}\r\n                    // Below are optional props\r\n                    headerStyle={[styles.headerStyle, { paddingTop: 30 }]} // probably want to add paddingTop if using TopBarNav for the  entire height of screen to account for notches/status bars\r\n                    labelStyle={styles.labelStyle}\r\n                    underlineStyle={styles.underlineStyle}\r\n                    imageStyle={styles.imageStyle}\r\n                    sidePadding={40} // Can't set sidePadding in headerStyle because it's needed to calculate the width of the tabs\r\n                    inactiveOpacity={1}\r\n                    fadeLabels={true}\r\n                />\r\n            </View>\r\n        );\r\n    }\r\n \r\n    anotherRender() {\r\n        // if rendering the nav bar at the bottom is your thing\r\n        return (\r\n            <View style={{ flex: 1 }}>\r\n                <View style={{ flex: 1, transform: [{ scaleY: -1 }] }}>\r\n                    <TopBarNav\r\n                        // routeStack and renderScene are required props\r\n                        routeStack={ROUTESTACK}\r\n                        renderScene={(route, i) => {\r\n                            // This is a lot like the now deprecated Navigator component\r\n                            let Component = ROUTES[route.title];\r\n                            return (\r\n                                <View style={{ flex: 1, transform: [{ scaleY: -1 }] }}>\r\n                                    <Component index={i} />\r\n                                </View>\r\n                            );\r\n                        }}\r\n                        // Below are optional props\r\n                        headerStyle={{ paddingTop: 20, transform: [{ scaleY: -1 }] }} // probably want to add paddingTop: 20 if using TopBarNav for the  entire height of screen on iOS\r\n                        underlineStyle={{ height: 3 }}\r\n                    />\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n \r\nconst styles = StyleSheet.create({\r\n    headerStyle: {\r\n        borderBottomWidth: 1,\r\n        borderColor: '#e6faff',\r\n        backgroundColor: '#3385ff'\r\n    },\r\n    labelStyle: {\r\n        fontSize: 15,\r\n        fontWeight: '500',\r\n        color: '#fff'\r\n    },\r\n    imageStyle: {\r\n        height: 20,\r\n        width: 20,\r\n        tintColor: '#e6faff'\r\n    },\r\n    underlineStyle: {\r\n        height: 3.6,\r\n        backgroundColor: '#e6faff',\r\n        width: 40\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}