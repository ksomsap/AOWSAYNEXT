{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Unity, { UnityContent } from \"react-unity-webgl\";\nexport var Game =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props)); // Next up create a new Unity Content object to \n    // initialise and define your WebGL build. The \n    // paths are relative from your index file.\n\n    _this.unityContent = new UnityContent(\"../theresume/Build/Game.json\", \"../theresume/Build/UnityLoader.js\"); // Create a new listener for our Unity Events.\n    // We're going to call this event \"GameOver\" and\n    // pass the score to the listener. The second\n    // parameter will be a function.\n\n    _this.unityContent.on(\"GameOver\", function (score) {\n      // Now we can use the score to for example\n      // display it on our React app.\n      _this.setState({\n        gameOver: true,\n        score: score\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"render\",\n    value: function render() {\n      // Finally render the Unity component and pass \n      // the Unity content through the props.\n      return __jsx(Unity, {\n        unityContent: this.unityContent\n      });\n    }\n  }]);\n\n  return Game;\n}(React.Component);","map":{"version":3,"sources":["C:/Users/AOWSAY/Desktop/AOWSAYWEBSITE/server/components/Game.js"],"names":["React","Unity","UnityContent","Game","props","unityContent","on","score","setState","gameOver","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,YAAhB,QAAoC,mBAApC;AAEA,WAAaC,IAAb;AAAA;AAAA;AAAA;;AACE,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8EAAMA,KAAN,GADiB,CAGjB;AACA;AACA;;AAEA,UAAKC,YAAL,GAAoB,IAAIH,YAAJ,CAClB,8BADkB,EAElB,mCAFkB,CAApB,CAPiB,CAYjB;AACA;AACA;AACA;;AAEA,UAAKG,YAAL,CAAkBC,EAAlB,CAAqB,UAArB,EAAiC,UAAAC,KAAK,EAAI;AAExC;AACA;AAEA,YAAKC,QAAL,CAAc;AACZC,QAAAA,QAAQ,EAAE,IADE;AAEZF,QAAAA,KAAK,EAAEA;AAFK,OAAd;AAID,KATD;;AAjBiB;AA2BlB;;AA5BH;AAAA;AAAA,6BA8BW;AAEP;AACA;AAEA,aAAO,MAAC,KAAD;AAAO,QAAA,YAAY,EAAE,KAAKF;AAA1B,QAAP;AACD;AApCH;;AAAA;AAAA,EAA0BL,KAAK,CAACU,SAAhC","sourcesContent":["import React from \"react\";\r\nimport Unity, { UnityContent } from \"react-unity-webgl\";\r\n\r\nexport class Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Next up create a new Unity Content object to \r\n    // initialise and define your WebGL build. The \r\n    // paths are relative from your index file.\r\n\r\n    this.unityContent = new UnityContent(\r\n      \"../theresume/Build/Game.json\",\r\n      \"../theresume/Build/UnityLoader.js\"\r\n    );\r\n\r\n    // Create a new listener for our Unity Events.\r\n    // We're going to call this event \"GameOver\" and\r\n    // pass the score to the listener. The second\r\n    // parameter will be a function.\r\n\r\n    this.unityContent.on(\"GameOver\", score => {\r\n\r\n      // Now we can use the score to for example\r\n      // display it on our React app.\r\n\r\n      this.setState({\r\n        gameOver: true,\r\n        score: score\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    // Finally render the Unity component and pass \r\n    // the Unity content through the props.\r\n\r\n    return <Unity unityContent={this.unityContent} />;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}